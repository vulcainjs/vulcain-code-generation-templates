import { Service, ServiceDependency, Command, IRequestContext, AbstractServiceCommand, Model,
Property, Reference, CommandFactory, VulcainResponse } from 'vulcain-corejs';

// ==============================================================
//
// Code generated with pastaga (https://github.com/malain/pastaga)
// 
// ==============================================================


// ==============================================================
// Models
// ==============================================================
<%_ for(let model of state.schemas) { 
let extendsModel="";
let extendsStmt="";
if(model.extends) {
    extendsModel = `{extends: "${model.extends}"}`;
    extendsStmt= "extends " + model.extends;
}
-%>

/**
* <%= model.description  %>
*/
@Model(<%-extendsModel%>)
export class <%= model.name %> <%=extendsStmt%> {
<% for(let prop of model.properties) {
    if (prop.description) { -%>
    /**
    * <%= prop.description  %>
    */
    <%_ }
    if(prop.reference) { -%>
    @Reference(<%- JSON.stringify(prop.metadata) %>)
    <%_ } else { -%>
    @Property(<%- JSON.stringify(prop.metadata) %>)
    <%_ } -%>
    <%= prop.name%><%= required(prop)%>: <%= prop.type %>;
<%_ } -%>
}
<%_ } -%>

// ==============================================================
// Command
// ==============================================================

@Command({ executionTimeoutInMilliseconds: 1500 })
@ServiceDependency('<%=state.serviceName%>', '<%=state.serviceVersion%>', '<%=state.address%>') 
export class <%= normalizeService(state.serviceName) %>Command extends AbstractServiceCommand {
}

// ==============================================================
// Service proxy
// ==============================================================
export class <%= normalizeService(state.serviceName) %>Proxy {

    private static serviceName = "<%=state.serviceName%>";
    private static serviceVersion = "<%=state.serviceVersion%>";
    private userContext: {authorization: string, tenant: string};

    /**
    * 
    */
    constructor(private context: IRequestContext, authorization?: string, authorizationTenant=Service.defaultTenant) {
        if(authorization) {
            this.userContext = {authorization, tenant: authorizationTenant};
        }
    }
<%_ for(let method of state.services) {
    if(method.verb[0] == "_")
        continue;
    let p = arguments(method);
    if( method.kind == "action") { -%>

    /**
    * Action: <%= method.description %>
    <%_ for(let p of getInputProperties(method)) { -%>
    * @params {<%= p.type %>} <%= p.name %> - <%= p.description  || '.' %>
    <%_ } -%>
    * @params [optional] args - additional url parameters
    */
<%_ if( method.inputSchema) { -%>
    async <%=normalizeMethod(method.verb)%>(<%=p.params.join('')%> args?) {
        const $data = <%=p.args%>;
        return this.<%=normalizeMethod(method.verb)%>Entity($data, args);
    }

    /**
    * Action: <%= method.description %>
    * @params {<%= method.inputSchema %>} entity -
    * @params [optional] args - additional url parameters
    */
    async <%=normalizeMethod(method.verb)%>Entity(data: <%= method.inputSchema %>, args?): Promise<VulcainResponse<<%=method.outputSchema||"any"%>>> {
        let command = CommandFactory.createCommand<<%=normalizeService(state.serviceName) + "Command" %>>(this.context, '<%=createSpecificCommandName(state.serviceName, method.verb) + "Command" %>');
        if( !command ) {
            command = CommandFactory.createCommand<<%=normalizeService(state.serviceName) + "Command" %>>(this.context, '<%=normalizeService(state.serviceName) + "Command" %>');
        }
        const response = await command.execAction<<%=method.outputSchema||"any"%>>(
            <%= normalizeService(state.serviceName) %>Proxy.serviceName, 
            <%= normalizeService(state.serviceName) %>Proxy.serviceVersion, 
            this.userContext,
            '<%=method.verb%>', 
            data, 
            args
        );
        return response;
    }
<%_ } else { -%>
    async <%=normalizeMethod(method.verb)%>(<%=p.params.join('')%> args?): Promise<VulcainResponse<<%=method.outputSchema||"any"%>>> {
        const $data = <%=p.args%>;
        let command = CommandFactory.createCommand<<%=normalizeService(state.serviceName) + "Command" %>>(this.context, '<%=createSpecificCommandName(state.serviceName, method.verb) + "Command" %>');
        if( !command ) {
            command = CommandFactory.createCommand<<%=normalizeService(state.serviceName) + "Command" %>>(this.context, '<%=normalizeService(state.serviceName) + "Command" %>');
        }
        const response = await command.execAction<<%=method.outputSchema||"any"%>>(
            <%= normalizeService(state.serviceName) %>Proxy.serviceName, 
            <%= normalizeService(state.serviceName) %>Proxy.serviceVersion, 
            this.userContext, 
            '<%=method.verb%>', 
            $data, 
            args
        );
        return response;
    }

<%_ }
} else if( method.kind === "get" ) { -%>

    /**
    * <%= method.description || "Get" %>
    * @params id string - unique id
    */
    async <%=normalizeMethod(method.verb, 'get')%>(<%= p.params.join('')%>): Promise<VulcainResponse<<%=method.outputSchema||"any"%>>> {
        let command = CommandFactory.createCommand<<%=normalizeService(state.serviceName) + "Command" %>>(this.context, '<%=createSpecificCommandName(state.serviceName, method.verb, 'Get') + "Command" %>');
        if( !command ) {
            command = CommandFactory.createCommand<<%=normalizeService(state.serviceName) + "Command" %>>(this.context, '<%=normalizeService(state.serviceName) + "Command" %>');
        }
        const response = await command.execGet<<%=method.outputSchema||"any"%>>(
            <%= normalizeService(state.serviceName) %>Proxy.serviceName, 
            <%= normalizeService(state.serviceName) %>Proxy.serviceVersion, 
            this.userContext, 
            id,
            <%=p.args%>
        );
        return response;
    }

    <% } else if(method.kind === "query" && method.action === "all") { -%>

    /**
    * <%= method.description || "Get all" %>
    <%_ for(let p of getInputProperties(method)) { -%>
    * @params {<%= p.type %>} <%= p.name %> - <%= p.description  || '.' %>
    <%_ } -%>
    * @params [optional] query - filter query
    * @params {number} page - Page to retrieve
    * @params {number} maxByPage - Item by page (default 100)
    */
    async <%=normalizeMethod(method.verb, 'getAll')%>(<%= p.params.join('')%> query?, page?: number, maxByPage?: number): Promise<VulcainResponse<<%=method.outputSchema||"any"%>[]>> {
        let command = CommandFactory.createCommand<<%=normalizeService(state.serviceName) + "Command" %>>(this.context, '<%=createSpecificCommandName(state.serviceName, method.verb, 'GetAll') + "Command" %>');
        if( !command ) {
            command = CommandFactory.createCommand<<%=normalizeService(state.serviceName) + "Command" %>>(this.context, '<%=normalizeService(state.serviceName) + "Command" %>');
        }
        const response = await command.execQuery<<%=method.outputSchema||"any"%>[]>(
            <%= normalizeService(state.serviceName) %>Proxy.serviceName, 
            <%= normalizeService(state.serviceName) %>Proxy.serviceVersion, 
            this.userContext, 
            '<%=method.verb%>', 
            query, 
            <%=p.args%>, 
            page, 
            maxByPage
        );
        return response;
    }

    <%_ } else { -%>

    /**
    * Query: <%= method.description %>
    <%_ for(let p of getInputProperties(method)) { -%>
    * @params {<%= p.type %>} <%= p.name %> - <%= p.description  || '.' %>
    <%_ } -%>
<%_ if(method.outputType === "one") { -%> 
    * @params [optional] args - additional url parameters
    */
    async <%=normalizeMethod(method.verb, 'get')%><T>(<%= p.params.join('')%> args?) {
        let command = CommandFactory.createCommand<<%=normalizeService(state.serviceName) + "Command" %>>(this.context, '<%=createSpecificCommandName(state.serviceName, method.verb, 'Get') + "Command" %>');
        if( !command ) {
            command = CommandFactory.createCommand<<%=normalizeService(state.serviceName) + "Command" %>>(this.context, '<%=normalizeService(state.serviceName) + "Command" %>');
        }
        const response = await command.execGet<<%=method.outputSchema||"any"%>>(
            <%= normalizeService(state.serviceName) %>Proxy.serviceName, 
            <%= normalizeService(state.serviceName) %>Proxy.serviceVersion, 
            this.userContext, 
            <%=p.args%>,
            args
        );
        return response;
    }

<%_ } else { -%>           
    * @params {number} page - Page to retrieve
    * @params {number} maxByPage - Item by page (default 100)
    */
    async <%=normalizeMethod(method.verb, 'all')%>(<%= p.params.join('')%> page?: number, maxByPage?: number) {
        let command = CommandFactory.createCommand<<%=normalizeService(state.serviceName) + "Command" %>>(this.context, '<%=createSpecificCommandName(state.serviceName, method.verb, 'Get') + "Command" %>');
        if( !command ) {
            command = CommandFactory.createCommand<<%=normalizeService(state.serviceName) + "Command" %>>(this.context, '<%=normalizeService(state.serviceName) + "Command" %>');
        }
        const response = await command.execQuery<<%=method.outputSchema||"any"%>[]>(
            <%= normalizeService(state.serviceName) %>Proxy.serviceName, 
            <%= normalizeService(state.serviceName) %>Proxy.serviceVersion, 
            this.userContext, 
            '<%=method.verb%>', 
            <%=p.args%>, 
            null,
            page, 
            maxByPage
        );
        return response;
    }

<%_ } 
  }
} -%>
}
